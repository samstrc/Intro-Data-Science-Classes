#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Oct  1 11:29:11 2024

@author: samstrickler
"""

# This function returns no value and outputs all factors of a given integer num to the console.
def print_factors(num):
    print(f'The factors of {num} are:', end = " ") #The f calls the format() string function and the 'end' part changes the ending of the string to be a space instead of a newline character.
    for x in range(1, num+1):
        if (num % x == 0 and x < num):
            print(f"{x}", end = ",") 
        elif (num % x == 0 and x == num):
            print(f" and {x}")


# This function returns true if a given number num is prime, and false if it is composite. 
def is_prime(num):
    
    if (num == 0): # Special cases were made for 0, 1, -1
        return False
    
    elif (abs(num) == 1): # Note: The absolute value function was used here to handle negative integers such as -1
        return False
    else:
        factors = [] # The rest of this block will append any number from 1 through the number (num) which you are checking. 
        for x in range(1, abs(num) + 1):
            if (num % x == 0):
                factors.append(x) # If there is no remainder, then the current value of x is a factor of num. Factors are appended to the list.
        
        if (len(factors) > 2): # To be prime, a number should have no more than 2 factors. Therefore, if the list of factors is greater than 2, it must mean the number is composite. 
            return False
        else:
            return True

    
    

loopFlag = True; # Used to keep asking for input in the case of a negative n value

while(loopFlag):
    print('\n\nMersenne numbers are defined for all natural numbers n. Some of these numbers are prime. Please enter your choice of n:', end = " ")
    userChoice = int(input()) # Stores user's choice of n
    
    if (userChoice < 0 or userChoice == 0): # Sets range for which n is invalid
        print('Input error. Please only enter a natural number.')
    else:
        perfectNum = (2 ** userChoice) - 1 # Calculates the Marsenne number given that n = userChoice
        print(f'The Mersenne number for n={userChoice} is {perfectNum}.')
        loopFlag = False; # Leaves loop since data is valid
        
        

print(f'\nNext, we will use it to find the factors of {perfectNum}.')
print_factors(perfectNum) # Calls print function to list out all factors for a given perfectNum

# This code uses the shorthand if syntax to report if a perfectNum is prime or not
print(f'\nThus, {perfectNum} is prime!') if is_prime(perfectNum) else print(f'\nThus, {perfectNum} is not prime.') 




# This code answers parts a, b, and c. I used code to calculate part a and store the results in a list.  
print('-------------------------------------------------------------------------')
print('Questions:\n\n\n')

# Question a
print("""a) Find all of the Mersenne primes from up to n = 20. Give me both the value of n
and the value of the prime Mn. i.e., For n = 3, M3 = 7 is a Mersenne prime.""")

primesInRange = []
for n in range(1, 21):
    mersNum = (2 ** n) - 1
    
    if (is_prime(mersNum)):
        primesInRange.append(f'n = {n}: ' + str(mersNum)) # If a mersNum is prime, append its value and its value for n

print('\nHere are the Mersenne primes in the range n = 1 through n = 20 and their index:\n', primesInRange)


# Question b
print("""\n\nb) At what value n does it start to take your computer some time to run your
program? It will not be instant for large enough n.""")

print("\n I noticed the computer starts to take a second at n = 25, and it quickly gets worse the larger the number you input for n. Inputting 50 is particularly bad, mainly for computing its factors.")





